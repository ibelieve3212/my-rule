#回家ss节点
listeners:
  - name: ss-home
    type: shadowsocks
    port: <port>
    listen: 0.0.0.0
    cipher: aes-128-gcm
    password: <PASSWORD>
    udp: true

######### 锚点 start #######
# 策略组相关
pr:
  &pr {
    type: select,
    proxies:
      [
        ⚡ 全局规则,
        ♻️ 自动切换,
        🚀 手动切换,
        DIRECT,
        低倍率,
        🇭🇰 香港自动,
        🇨🇳 台湾自动,
        🇯🇵 日本自动,
        🇸🇬 新加坡自动,
        🇺🇲 美国自动,
        🇰🇷 韩国自动,
        🇩🇪 德国自动,
        🇭🇰 香港手动,
        🇨🇳 台湾手动,
        🇯🇵 日本手动,
        🇸🇬 新加坡手动,
        🇺🇲 美国手动,
        🇰🇷 韩国手动,
        🇩🇪 德国手动,
      ],
  }

#这里是订阅更新和延迟测试相关的
p:
  &p {
    type: http,
    interval: 3600,
    health-check:
      {
        enable: true,
        url: https://captive.apple.com/generate_204,
        interval: 300,
      },
  }
u:
  &u {
    url: https://captive.apple.com/generate_204,
    interval: 300,
    tolerance: 10,
    timeout: 5000,
  }

######### 锚点 end #######

# url 里填写自己的订阅,名称不能重复
proxy-providers:
  花云:
    <<: *p
    url: "https://api.xmancdn.com/osubscribe.php?sid=1545&token=ROved1PK&sip002=1"
    path: ./proxy_provider/huayun.yaml
    exclude-filter: "Traffic|Expire"
  # 第二个机场，如有就解开注释，名称不能重复,path（文件位置）不能重复，并在12行那解开provider2的注释
  worker1:
    <<: *p
    url: ""
    path: ./proxy_provider/worker1.yaml
  worker2:
    <<: *p
    url: ""
    path: ./proxy_provider/worker2.yaml
    exclude-filter: "电信|联通|移动|频道|IPV6"
  # 本地文件
  custom:
    <<: *p
    type: file
    path: ./proxy_provider/custom.yaml

proxy-groups:
  - {
      name: ⚡ 全局规则,
      type: select,
      proxies:
        [
          ♻️ 自动切换,
          🚀 手动切换,
          DIRECT,
          低倍率,
          🇭🇰 香港自动,
          🇨🇳 台湾自动,
          🇯🇵 日本自动,
          🇸🇬 新加坡自动,
          🇺🇲 美国自动,
          🇰🇷 韩国自动,
          🇩🇪 德国自动,
          🇭🇰 香港手动,
          🇨🇳 台湾手动,
          🇯🇵 日本手动,
          🇸🇬 新加坡手动,
          🇺🇲 美国手动,
          🇰🇷 韩国手动,
          🇩🇪 德国手动,
        ],
    }
  - { name: ♻️ 自动切换, type: url-test, include-all-providers: true, <<: *u }
  - { name: 🚀 手动切换, type: select, include-all-providers: true }
  - {
      name: 🎥 Emby服务,
      type: select,
      proxies:
        [
          ⚡ 全局规则,
          ♻️ 自动切换,
          🚀 手动切换,
          DIRECT,
          低倍率,
          🇭🇰 香港自动,
          🇨🇳 台湾自动,
          🇯🇵 日本自动,
          🇸🇬 新加坡自动,
          🇺🇲 美国自动,
          🇰🇷 韩国自动,
          🇩🇪 德国自动,
          🇭🇰 香港手动,
          🇨🇳 台湾手动,
          🇯🇵 日本手动,
          🇸🇬 新加坡手动,
          🇺🇲 美国手动,
          🇰🇷 韩国手动,
          🇩🇪 德国手动,
        ],
    }
  - { name: 📢 Google服务, <<: *pr }
  - { name: 📲 Telegram, <<: *pr }
  - { name: Ⓜ️ 微软服务, <<: *pr }
  - { name: 🍎 Apple服务, <<: *pr }
  - { name: 🎵 Spotify, <<: *pr }
  - { name: ▶️ 奈飞服务, <<: *pr }
  - { name: 💧 Twitter, <<: *pr }
  - {
      name: 🇨🇳 国内,
      type: select,
      proxies: [DIRECT, ♻️ 自动切换, 🚀 手动切换, ⚡ 全局规则],
    }
  #- { name: 其他, <<: *pr }
  - {
      name: 低倍率,
      type: url-test,
      include-all-providers: true,
      filter: "实验性",
      <<: *u,
    }

  #分隔,下面是地区分组
  - {
      name: 🇭🇰 香港自动,
      type: url-test,
      include-all-providers: true,
      filter: "(?i)港|hk|hongkong|hong kong",
      <<: *u,
    }
  - {
      name: 🇨🇳 台湾自动,
      type: url-test,
      include-all-providers: true,
      filter: "(?i)台|新北|彰化|TW|Taiwan",
      <<: *u,
    }
  - {
      name: 🇯🇵 日本自动,
      type: url-test,
      include-all-providers: true,
      filter: "(?i)日|jp|japan",
      <<: *u,
    }
  - {
      name: 🇺🇲 美国自动,
      type: url-test,
      include-all-providers: true,
      filter: "(?i)美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States",
      <<: *u,
    }
  - {
      name: 🇸🇬 新加坡自动,
      type: url-test,
      include-all-providers: true,
      filter: "(?i)(新|sg|singapore)",
      <<: *u,
    }
  - {
      name: 🇰🇷 韩国自动,
      type: url-test,
      include-all-providers: true,
      filter: "(?i)(KR|Korea|KOR|首尔|韩|韓|春川)",
      <<: *u,
    }
  - {
      name: 🇩🇪 德国自动,
      type: url-test,
      include-all-providers: true,
      filter: "(?i)(德|Germany)",
      <<: *u,
    }
  - {
      name: 🇭🇰 香港手动,
      type: select,
      include-all-providers: true,
      filter: "(?i)港|hk|hongkong|hong kong",
    }
  - {
      name: 🇨🇳 台湾手动,
      type: select,
      include-all-providers: true,
      filter: "(?i)台|新北|彰化|TW|Taiwan",
    }
  - {
      name: 🇯🇵 日本手动,
      type: select,
      include-all-providers: true,
      filter: "(?i)日|jp|japan",
    }
  - {
      name: 🇺🇲 美国手动,
      type: select,
      include-all-providers: true,
      filter: "(?i)美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States",
    }
  - {
      name: 🇸🇬 新加坡手动,
      type: select,
      include-all-providers: true,
      filter: "(?i)(新|sg|singapore)",
    }
  - {
      name: 🇰🇷 韩国手动,
      type: select,
      include-all-providers: true,
      filter: "(?i)(KR|Korea|KOR|首尔|韩|韓|春川)",
    }
  - {
      name: 🇩🇪 德国手动,
      type: select,
      include-all-providers: true,
      filter: "(?i)(德|Germany)",
    }
  - {
      name: 🐟 漏网之鱼,
      type: select,
      proxies: [⚡ 全局规则, ♻️ 自动切换, 🚀 手动切换, DIRECT],
    }

rules:
  #域名规则
  - GEOIP,lan,DIRECT,no-resolve
  - RULE-SET,direct_domain,DIRECT
  - RULE-SET,reject_domain,REJECT
  - RULE-SET,emby_domain,🎥 Emby服务
  - RULE-SET,emby2_domain,🎥 Emby服务
  - RULE-SET,apple_domain,🍎 Apple服务
  - RULE-SET,ehentai_domain,⚡ 全局规则
  - RULE-SET,github_domain,⚡ 全局规则
  - RULE-SET,twitter_domain,💧 Twitter
  - RULE-SET,youtube_domain,📢 Google服务
  - RULE-SET,google_domain,📢 Google服务
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,▶️ 奈飞服务
  - RULE-SET,bilibili_domain,🇨🇳 国内
  - RULE-SET,microsoft_domain,Ⓜ️ 微软服务
  - RULE-SET,spotify_domain,🎵 Spotify
  - RULE-SET,pixiv_domain,⚡ 全局规则
  - RULE-SET,cn_domain,🇨🇳 国内
  #- RULE-SET,geolocation-!cn,🐟 漏网之鱼

  #IP规则
  - RULE-SET,google_ip,📢 Google服务
  - RULE-SET,netflix_ip,▶️ 奈飞服务
  - RULE-SET,telegram_ip,📲 Telegram
  - RULE-SET,twitter_ip,💧 Twitter
  - RULE-SET,cn_ip,🇨🇳 国内
  - MATCH,🐟 漏网之鱼

rule-anchor:
  ip: &ip { type: http, interval: 86400, behavior: ipcidr, format: text }
  domain:
    &domain { type: http, interval: 86400, behavior: domain, format: text }
rule-providers:
  private:
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.list"
  cn_domain:
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.list"
  emby_domain:
    <<: *domain
    url: "https://raw.githubusercontent.com/lamysafari88/ruleset/master/clash/emby.list"
  emby2_domain:
    <<: *domain
    url: "https://raw.githubusercontent.com/ibelieve3212/my-rule/main/emby.list"
  ehentai_domain:
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ehentai.list"
  github_domain:
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.list"
  twitter_domain:
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/twitter.list"
  youtube_domain:
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.list"
  google_domain:
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.list"
  telegram_domain:
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.list"
  netflix_domain:
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.list"
  bilibili_domain:
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bilibili.list"
  spotify_domain:
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/spotify.list"
  pixiv_domain:
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/pixiv.list"
  geolocation-!cn:
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.list"
  apple_domain:
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple.list"
  microsoft_domain:
    <<: *domain
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.list"
  direct_domain:
    <<: *domain
    url: "https://raw.githubusercontent.com/ibelieve3212/my-rule/main/direct.list"
  reject_domain:
    <<: *domain
    url: "https://raw.githubusercontent.com/ibelieve3212/my-rule/main/reject.list"

  cn_ip:
    <<: *ip
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.list"
  google_ip:
    <<: *ip
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.list"
  netflix_ip:
    <<: *ip
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.list"
  twitter_ip:
    <<: *ip
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/twitter.list"
  telegram_ip:
    <<: *ip
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.list"
